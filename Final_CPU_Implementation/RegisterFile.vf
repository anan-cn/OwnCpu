////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.5
//  \   \         Application : sch2hdl
//  /   /         Filename : RegisterFile.vf
// /___/   /\     Timestamp : 04/07/2013 14:04:39
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family artix7 -verilog "C:/Users/rstrogonovs/Desktop/Final CPU Architecture/CPU/RegisterFile.vf" -w "C:/Users/rstrogonovs/Desktop/Final CPU Architecture/CPU/RegisterFile.sch"
//Design Name: RegisterFile
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module RegisterFile(CLK, 
                    Rd, 
                    RDData, 
                    RegWrite, 
                    Reset, 
                    RS, 
                    RT, 
                    RS_OUT, 
                    RT_OUT);

    input CLK;
    input [4:0] Rd;
    input [31:0] RDData;
    input RegWrite;
    input Reset;
    input [4:0] RS;
    input [4:0] RT;
   output [31:0] RS_OUT;
   output [31:0] RT_OUT;
   
   wire [31:0] at_reg;
   wire [31:0] a0_reg;
   wire [31:0] a1_reg;
   wire [31:0] a2_reg;
   wire [31:0] a3_reg;
   wire [31:0] E;
   wire [31:0] fp_reg;
   wire [31:0] gp_reg;
   wire [31:0] k0_reg;
   wire [31:0] k1_reg;
   wire [31:0] ra_reg;
   wire [31:0] sp_reg;
   wire [31:0] s0_reg;
   wire [31:0] s1_reg;
   wire [31:0] s2_reg;
   wire [31:0] s3_reg;
   wire [31:0] s4_reg;
   wire [31:0] s5_reg;
   wire [31:0] s6_reg;
   wire [31:0] s7_reg;
   wire [31:0] t0_reg;
   wire [31:0] t1_reg;
   wire [31:0] t2_reg;
   wire [31:0] t3_reg;
   wire [31:0] t4_reg;
   wire [31:0] t5_reg;
   wire [31:0] t6_reg;
   wire [31:0] t7_reg;
   wire [31:0] t8_reg;
   wire [31:0] t9_reg;
   wire [31:0] v0_reg;
   wire [31:0] v1_reg;
   wire [31:0] zero_reg;
   
   SIMPREG  at (.CLK(CLK), 
               .ENABLE(E[1]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(at_reg[31:0]));
   SIMPREG  a0 (.CLK(CLK), 
               .ENABLE(E[4]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(a0_reg[31:0]));
   SIMPREG  a1 (.CLK(CLK), 
               .ENABLE(E[5]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(a1_reg[31:0]));
   SIMPREG  a2 (.CLK(CLK), 
               .ENABLE(E[6]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(a2_reg[31:0]));
   SIMPREG  a3 (.CLK(CLK), 
               .ENABLE(E[7]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(a3_reg[31:0]));
   SIMPREG  fp (.CLK(CLK), 
               .ENABLE(E[30]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(fp_reg[31:0]));
   SIMPREG  gp (.CLK(CLK), 
               .ENABLE(E[28]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(gp_reg[31:0]));
   SIMPREG  k0 (.CLK(CLK), 
               .ENABLE(E[26]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(k0_reg[31:0]));
   SIMPREG  k1 (.CLK(CLK), 
               .ENABLE(E[27]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(k1_reg[31:0]));
   SIMPREG  ra (.CLK(CLK), 
               .ENABLE(E[31]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(ra_reg[31:0]));
   SIMPREG  sp (.CLK(CLK), 
               .ENABLE(E[29]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(sp_reg[31:0]));
   SIMPREG  s0 (.CLK(CLK), 
               .ENABLE(E[16]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s0_reg[31:0]));
   SIMPREG  s1 (.CLK(CLK), 
               .ENABLE(E[17]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s1_reg[31:0]));
   SIMPREG  s2 (.CLK(CLK), 
               .ENABLE(E[18]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s2_reg[31:0]));
   SIMPREG  s3 (.CLK(CLK), 
               .ENABLE(E[19]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s3_reg[31:0]));
   SIMPREG  s4 (.CLK(CLK), 
               .ENABLE(E[20]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s4_reg[31:0]));
   SIMPREG  s5 (.CLK(CLK), 
               .ENABLE(E[21]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s5_reg[31:0]));
   SIMPREG  s6 (.CLK(CLK), 
               .ENABLE(E[22]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s6_reg[31:0]));
   SIMPREG  s7 (.CLK(CLK), 
               .ENABLE(E[23]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(s7_reg[31:0]));
   SIMPREG  t0 (.CLK(CLK), 
               .ENABLE(E[8]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t0_reg[31:0]));
   SIMPREG  t1 (.CLK(CLK), 
               .ENABLE(E[9]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t1_reg[31:0]));
   SIMPREG  t2 (.CLK(CLK), 
               .ENABLE(E[10]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t2_reg[31:0]));
   SIMPREG  t3 (.CLK(CLK), 
               .ENABLE(E[11]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t3_reg[31:0]));
   SIMPREG  t4 (.CLK(CLK), 
               .ENABLE(E[12]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t4_reg[31:0]));
   SIMPREG  t5 (.CLK(CLK), 
               .ENABLE(E[13]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t5_reg[31:0]));
   SIMPREG  t6 (.CLK(CLK), 
               .ENABLE(E[14]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t6_reg[31:0]));
   SIMPREG  t7 (.CLK(CLK), 
               .ENABLE(E[15]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t7_reg[31:0]));
   SIMPREG  t8 (.CLK(CLK), 
               .ENABLE(E[24]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t8_reg[31:0]));
   SIMPREG  t9 (.CLK(CLK), 
               .ENABLE(E[25]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(t9_reg[31:0]));
   SIMPREG  v0 (.CLK(CLK), 
               .ENABLE(E[2]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(v0_reg[31:0]));
   SIMPREG  v1 (.CLK(CLK), 
               .ENABLE(E[3]), 
               .RdData(RDData[31:0]), 
               .RESET(Reset), 
               .DOUT(v1_reg[31:0]));
   decoder  XLXI_2 (.destinationRegister(Rd[4:0]), 
                   .enable(RegWrite), 
                   .decoderOutput(E[31:0]));
   muxQ321  XLXI_145 (.d0(zero_reg[31:0]), 
                     .d1(at_reg[31:0]), 
                     .d2(v0_reg[31:0]), 
                     .d3(v1_reg[31:0]), 
                     .d4(a0_reg[31:0]), 
                     .d5(a1_reg[31:0]), 
                     .d6(a2_reg[31:0]), 
                     .d7(a3_reg[31:0]), 
                     .d8(t0_reg[31:0]), 
                     .d9(t1_reg[31:0]), 
                     .d10(t2_reg[31:0]), 
                     .d11(t3_reg[31:0]), 
                     .d12(t4_reg[31:0]), 
                     .d13(t5_reg[31:0]), 
                     .d14(t6_reg[31:0]), 
                     .d15(t7_reg[31:0]), 
                     .d16(s0_reg[31:0]), 
                     .d17(s1_reg[31:0]), 
                     .d18(s2_reg[31:0]), 
                     .d19(s3_reg[31:0]), 
                     .d20(s4_reg[31:0]), 
                     .d21(s5_reg[31:0]), 
                     .d22(s6_reg[31:0]), 
                     .d23(s7_reg[31:0]), 
                     .d24(t8_reg[31:0]), 
                     .d25(t9_reg[31:0]), 
                     .d26(k0_reg[31:0]), 
                     .d27(k1_reg[31:0]), 
                     .d28(gp_reg[31:0]), 
                     .d29(sp_reg[31:0]), 
                     .d30(fp_reg[31:0]), 
                     .d31(ra_reg[31:0]), 
                     .s(RS[4:0]), 
                     .y(RS_OUT[31:0]));
   muxQ321  XLXI_146 (.d0(zero_reg[31:0]), 
                     .d1(at_reg[31:0]), 
                     .d2(v0_reg[31:0]), 
                     .d3(v1_reg[31:0]), 
                     .d4(a0_reg[31:0]), 
                     .d5(a1_reg[31:0]), 
                     .d6(a2_reg[31:0]), 
                     .d7(a3_reg[31:0]), 
                     .d8(t0_reg[31:0]), 
                     .d9(t1_reg[31:0]), 
                     .d10(t2_reg[31:0]), 
                     .d11(t3_reg[31:0]), 
                     .d12(t4_reg[31:0]), 
                     .d13(t5_reg[31:0]), 
                     .d14(t6_reg[31:0]), 
                     .d15(t7_reg[31:0]), 
                     .d16(s0_reg[31:0]), 
                     .d17(s1_reg[31:0]), 
                     .d18(s2_reg[31:0]), 
                     .d19(s3_reg[31:0]), 
                     .d20(s4_reg[31:0]), 
                     .d21(s5_reg[31:0]), 
                     .d22(s6_reg[31:0]), 
                     .d23(s7_reg[31:0]), 
                     .d24(t8_reg[31:0]), 
                     .d25(t9_reg[31:0]), 
                     .d26(k0_reg[31:0]), 
                     .d27(k1_reg[31:0]), 
                     .d28(gp_reg[31:0]), 
                     .d29(sp_reg[31:0]), 
                     .d30(fp_reg[31:0]), 
                     .d31(ra_reg[31:0]), 
                     .s(RT[4:0]), 
                     .y(RT_OUT[31:0]));
   SIMPREG  zero (.CLK(CLK), 
                 .ENABLE(E[0]), 
                 .RdData(RDData[31:0]), 
                 .RESET(Reset), 
                 .DOUT(zero_reg[31:0]));
endmodule
